#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∑ Dune Analytics
"""

import os
import requests
import pandas as pd

def check_dune_api_key():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞ Dune"""
    api_key = os.getenv('DUNE_API_KEY')
    if not api_key:
        print("‚ùå DUNE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ: {api_key[:10]}...{api_key[-5:]}")
    
    # –¢–µ—Å—Ç—É—î–º–æ API –∫–ª—é—á
    headers = {'X-DUNE-API-KEY': api_key}
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        response = requests.get('https://api.dune.com/api/v1/table', headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ API –∫–ª—é—á –≤–∞–ª—ñ–¥–Ω–∏–π!")
            tables = response.json()
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü—å —É –≤–∞—à–æ–º—É –∞–∫–∞—É–Ω—Ç—ñ")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ
            for table in tables:
                table_name = table.get('name', 'unknown')
                if 'extended' in table_name or 'fedfunds' in table_name:
                    print(f"   üìÑ {table_name}")
                    
        else:
            print(f"‚ùå API –∫–ª—é—á –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ API: {e}")
        return False
    
    return True

def check_csv_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—à—ñ CSV —Ñ–∞–π–ª–∏"""
    uploads_dir = "uploads"
    
    if not os.path.exists(uploads_dir):
        print("‚ùå –ü–∞–ø–∫–∞ uploads/ –Ω–µ —ñ—Å–Ω—É—î!")
        return False
    
    csv_files = [f for f in os.listdir(uploads_dir) if f.endswith('.csv')]
    
    if not csv_files:
        print("‚ùå CSV —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª—ñ–≤:")
    
    for filename in csv_files:
        filepath = os.path.join(uploads_dir, filename)
        try:
            df = pd.read_csv(filepath)
            size_mb = os.path.getsize(filepath) / (1024 * 1024)
            
            print(f"   üìÑ {filename}:")
            print(f"      üìä –†—è–¥–∫—ñ–≤: {len(df)}")
            print(f"      üìè –†–æ–∑–º—ñ—Ä: {size_mb:.2f} MB")
            print(f"      üè∑Ô∏è –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns[:5])}{'...' if len(df.columns) > 5 else ''}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —É –Ω–∞–∑–≤–∞—Ö –∫–æ–ª–æ–Ω–æ–∫
            bad_columns = [col for col in df.columns if col[0].isdigit() or not col.replace('_', '').replace('-', '').isalnum()]
            if bad_columns:
                print(f"      ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {bad_columns}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö
            if len(df) > 0:
                print(f"      üìã –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å: {dict(df.iloc[0].head(3))}")
            
        except Exception as e:
            print(f"   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {filename}: {e}")
    
    return True

def test_upload_small_file():
    """–¢–µ—Å—Ç—É—î –∑–∞–≥—Ä—É–∑–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª—É"""
    api_key = os.getenv('DUNE_API_KEY')
    if not api_key:
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    test_data = pd.DataFrame({
        'timestamp': ['2024-01-01T00:00:00Z'],
        'test_value': [123],
        'test_string': ['hello']
    })
    
    test_file = "uploads/test_upload.csv"
    test_data.to_csv(test_file, index=False)
    
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥—Ä—É–∑–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª—É...")
    
    try:
        with open(test_file, 'rb') as f:
            files = {'data': (os.path.basename(test_file), f, 'text/csv')}
            data = {
                'table_name': 'test_upload',
                'description': 'Test upload',
                'is_private': 'false'
            }
            headers = {'X-DUNE-API-KEY': api_key}
            
            response = requests.post(
                'https://api.dune.com/api/v1/table/upload/csv',
                headers=headers,
                files=files,
                data=data,
                timeout=30
            )
        
        print(f"üì§ –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
        print(f"üìÑ –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø—ñ—à–Ω–∞!")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è!")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
        os.remove(test_file)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False
    
    return response.status_code == 200

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑ Dune Analytics")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á
    print("\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á–∞...")
    api_valid = check_dune_api_key()
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ CSV —Ñ–∞–π–ª–∏
    print("\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSV —Ñ–∞–π–ª—ñ–≤...")
    files_valid = check_csv_files()
    
    # 3. –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≥—Ä—É–∑–∫—É
    if api_valid and files_valid:
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥—Ä—É–∑–∫–∏...")
        upload_works = test_upload_small_file()
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"   API –∫–ª—é—á: {'‚úÖ –û–ö' if api_valid else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"   CSV —Ñ–∞–π–ª–∏: {'‚úÖ –û–ö' if files_valid else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    
    if api_valid and files_valid:
        print(f"   –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {'‚úÖ –û–ö' if upload_works else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
        
        if upload_works:
            print("\nüí° –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞—Ü—é—î! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
            print("   1. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è —Ç–∞–±–ª–∏—Ü—ñ –≤ Dune UI")
            print("   2. –ß–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –¥–∞–Ω—ñ –≤ –≤–∞—à–∏—Ö –¥–∞—à–±–æ—Ä–¥–∞—Ö")
            print("   3. –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —á–∞—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é")
        else:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            print("   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É API –∫–ª—é—á–∞")
            print("   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω (—á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∞)")
            print("   3. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç–∏ —á–µ—Ä–µ–∑ Dune UI –≤—Ä—É—á–Ω—É")

if __name__ == "__main__":
    main()
