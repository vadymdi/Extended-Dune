#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª—ñ–≤ –≤ Dune Analytics
"""

import os
import sys
from pathlib import Path
from dune_client.client import DuneClient
from dune_client.api.table import InsertTableRequest
from dune_client.types import Address
import pandas as pd

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
sys.path.append(str(Path(__file__).parent.parent))

def get_dune_client():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª—ñ—î–Ω—Ç Dune –∑ API –∫–ª—é—á–µ–º"""
    api_key = os.getenv('DUNE_API_KEY')
    if not api_key:
        raise ValueError("‚ùå DUNE_API_KEY environment variable not set!")
    
    print("‚úÖ Dune API key found")
    return DuneClient(api_key)

def upload_csv_to_dune(client, csv_path: str, table_name: str):
    """–ó–∞–≥—Ä—É–∂–∞—î CSV —Ñ–∞–π–ª –≤ Dune —Ç–∞–±–ª–∏—Ü—é"""
    if not os.path.exists(csv_path):
        print(f"‚ö†Ô∏è File not found: {csv_path}")
        return False
    
    try:
        # –ß–∏—Ç–∞—î–º–æ CSV
        df = pd.read_csv(csv_path)
        print(f"üìä Loading {csv_path}: {len(df)} rows")
        
        if len(df) == 0:
            print(f"‚ö†Ô∏è Empty file: {csv_path}")
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        table_request = InsertTableRequest(
            table_name=table_name,
            data=df,
            is_private=False  # –ü—É–±–ª—ñ—á–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
        )
        
        # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –≤ Dune
        response = client.insert_table(table_request)
        print(f"‚úÖ Uploaded {csv_path} to dune.vadymdi.dataset_{table_name}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error uploading {csv_path}: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    uploads_dir = "uploads"
    
    if not os.path.exists(uploads_dir):
        print("‚ùå uploads/ directory not found")
        return False
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç Dune
    try:
        dune = get_dune_client()
    except Exception as e:
        print(f"‚ùå Failed to create Dune client: {e}")
        return False
    
    # –ú–∞–ø—ñ–Ω–≥ —Ñ–∞–π–ª—ñ–≤ –¥–æ –Ω–∞–∑–≤ —Ç–∞–±–ª–∏—Ü—å –≤ Dune
    file_mappings = {
        "extended_markets_data.csv": "extended_markets_data",
        "extended_trading_stats.csv": "extended_trading_stats", 
        "extended_tvl_data.csv": "extended_tvl_data",
        "extended_onchain_metrics.csv": "extended_onchain_metrics"
    }
    
    success_count = 0
    total_files = 0
    
    print("üöÄ Starting upload to Dune Analytics...")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ñ–∞–π–ª–∏
    for filename, table_name in file_mappings.items():
        file_path = os.path.join(uploads_dir, filename)
        
        if os.path.exists(file_path):
            total_files += 1
            if upload_csv_to_dune(dune, file_path, table_name):
                success_count += 1
            print("-" * 30)
    
    # –ó–∞–≥—Ä—É–∂–∞—î–º–æ —Ç–∞–∫–æ–∂ FEDFUNDS.csv —è–∫—â–æ —î
    fedfunds_path = os.path.join(uploads_dir, "FEDFUNDS.csv")
    if os.path.exists(fedfunds_path):
        total_files += 1
        if upload_csv_to_dune(dune, fedfunds_path, "fedfunds"):
            success_count += 1
    
    print("=" * 50)
    print(f"üìä Upload Summary: {success_count}/{total_files} files uploaded successfully")
    
    if success_count == total_files and total_files > 0:
        print("‚úÖ All uploads completed successfully!")
        return True
    elif success_count > 0:
        print("‚ö†Ô∏è Some uploads completed with warnings")
        return True
    else:
        print("‚ùå Upload failed!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
