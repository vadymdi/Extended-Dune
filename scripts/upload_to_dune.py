#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª—ñ–≤ –≤ Dune Analytics
–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ dune-client –∞–ª–µ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º API
"""

import os
import sys
import pandas as pd
from pathlib import Path

def upload_csv_to_dune_simple(csv_path: str, table_name: str, api_key: str):
    """–ó–∞–≥—Ä—É–∂–∞—î CSV —á–µ—Ä–µ–∑ dune-client (—è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ) –∞–±–æ —á–µ—Ä–µ–∑ curl"""
    
    if not os.path.exists(csv_path):
        print(f"‚ö†Ô∏è File not found: {csv_path}")
        return False
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ dune-client
        try:
            from dune_client.client import DuneClient
            
            print(f"üìä Uploading {csv_path} as table '{table_name}' via dune-client...")
            
            # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ
            df = pd.read_csv(csv_path)
            
            # –û—á–∏—â–∞—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            df.columns = [col.strip().replace(' ', '_').replace('-', '_') for col in df.columns]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
            dune = DuneClient(api_key)
            
            # –ó–∞–≥—Ä—É–∂–∞—î–º–æ —á–µ—Ä–µ–∑ upload_csv –º–µ—Ç–æ–¥
            result = dune.upload_csv(
                data=df,
                table_name=table_name,
                description=f"Extended Exchange data: {table_name}"
            )
            
            print(f"‚úÖ Successfully uploaded to dune.vadymdi.dataset_{table_name}")
            return True
            
        except ImportError:
            print("‚ö†Ô∏è dune-client not installed, trying curl method...")
            return upload_via_curl(csv_path, table_name, api_key)
        except Exception as e:
            print(f"‚ùå dune-client upload failed: {e}")
            print("üîÑ Trying curl method as fallback...")
            return upload_via_curl(csv_path, table_name, api_key)
            
    except Exception as e:
        print(f"‚ùå Error uploading {csv_path}: {e}")
        return False

def upload_via_curl(csv_path: str, table_name: str, api_key: str):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ curl"""
    try:
        import subprocess
        
        print(f"üìä Uploading {csv_path} as table '{table_name}' via curl...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ curl –∫–æ–º–∞–Ω–¥—É
        curl_cmd = [
            'curl',
            '-X', 'POST',
            'https://api.dune.com/api/v1/table/upload/csv',
            '-H', f'X-DUNE-API-KEY: {api_key}',
            '-F', f'data=@{csv_path}',
            '-F', f'table_name={table_name}',
            '-F', f'description=Extended Exchange data: {table_name}',
            '-F', 'is_private=false'
        ]
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(curl_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Successfully uploaded via curl to dune.vadymdi.dataset_{table_name}")
            return True
        else:
            print(f"‚ùå curl upload failed:")
            print(f"   stdout: {result.stdout}")
            print(f"   stderr: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå curl method failed: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á
    api_key = os.getenv('DUNE_API_KEY')
    if not api_key:
        print("‚ùå DUNE_API_KEY environment variable not set!")
        return False
    
    print("‚úÖ Dune API key found")
    
    uploads_dir = "uploads"
    
    if not os.path.exists(uploads_dir):
        print("‚ùå uploads/ directory not found")
        return False
    
    # –ú–∞–ø—ñ–Ω–≥ —Ñ–∞–π–ª—ñ–≤ –¥–æ –Ω–∞–∑–≤ —Ç–∞–±–ª–∏—Ü—å –≤ Dune
    file_mappings = {
        "extended_markets_data.csv": "extended_markets_data",
        "extended_trading_stats.csv": "extended_trading_stats", 
        "extended_tvl_data.csv": "extended_tvl_data",
        "FEDFUNDS.csv": "fedfunds"
    }
    
    success_count = 0
    total_files = 0
    
    print("üöÄ Starting upload to Dune Analytics...")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ñ–∞–π–ª–∏ —î –≤ uploads
    available_files = os.listdir(uploads_dir)
    csv_files = [f for f in available_files if f.endswith('.csv')]
    
    print(f"üìÅ Found {len(csv_files)} CSV files in uploads/:")
    for f in csv_files:
        file_path = os.path.join(uploads_dir, f)
        try:
            df = pd.read_csv(file_path)
            size = os.path.getsize(file_path) / 1024  # KB
            print(f"   üìÑ {f} ({len(df)} rows, {size:.1f}KB)")
        except:
            print(f"   üìÑ {f} (unable to read)")
    print("-" * 30)
    
    # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –≤—ñ–¥–æ–º—ñ —Ñ–∞–π–ª–∏
    for filename, table_name in file_mappings.items():
        file_path = os.path.join(uploads_dir, filename)
        
        if os.path.exists(file_path):
            total_files += 1
            if upload_csv_to_dune_simple(file_path, table_name, api_key):
                success_count += 1
            print("-" * 30)
    
    print("=" * 50)
    print(f"üìä Upload Summary: {success_count}/{total_files} files uploaded successfully")
    
    if total_files == 0:
        print("‚ö†Ô∏è No matching CSV files found to upload")
        return False
    elif success_count == total_files:
        print("‚úÖ All uploads completed successfully!")
        return True
    elif success_count > 0:
        print("‚ö†Ô∏è Some uploads completed with errors")
        return True
    else:
        print("‚ùå All uploads failed!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
