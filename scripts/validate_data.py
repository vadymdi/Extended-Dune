#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –≤ Dune
"""

import os
import pandas as pd
import sys
from datetime import datetime

def validate_data():
    """–í–∞–ª—ñ–¥—É—î –≤—Å—ñ CSV —Ñ–∞–π–ª–∏ –≤ uploads –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    
    uploads_dir = 'uploads'
    
    if not os.path.exists(uploads_dir):
        print('‚ùå No uploads directory found')
        return False
    
    csv_files = [f for f in os.listdir(uploads_dir) if f.endswith('.csv')]
    
    if not csv_files:
        print('‚ùå No CSV files found')
        return False
    
    print('üìä Data validation summary:')
    print('=' * 60)
    
    total_rows = 0
    valid_files = 0
    
    for filename in csv_files:
        filepath = os.path.join(uploads_dir, filename)
        try:
            df = pd.read_csv(filepath)
            rows = len(df)
            total_rows += rows
            size_mb = os.path.getsize(filepath) / (1024*1024)
            
            print(f'üìÑ {filename}:')
            print(f'   Rows: {rows:,}')
            print(f'   Size: {size_mb:.2f} MB')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å timestamp –∫–æ–ª–æ–Ω–æ–∫
            if 'timestamp' in df.columns or 'fetched_at' in df.columns:
                time_col = 'timestamp' if 'timestamp' in df.columns else 'fetched_at'
                latest = df[time_col].max()
                oldest = df[time_col].min()
                print(f'   Time range: {oldest} to {latest}')
            else:
                print('   ‚ö†Ô∏è  No timestamp column found')
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            columns_preview = ', '.join(df.columns[:5])
            if len(df.columns) > 5:
                columns_preview += f' ... (+{len(df.columns)-5} more)'
            print(f'   Columns: {columns_preview}')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ
            if rows == 0:
                print('   ‚ùå Empty file!')
            else:
                print('   ‚úÖ Valid data')
                valid_files += 1
                
            print('-' * 60)
            
        except Exception as e:
            print(f'‚ùå Error validating {filename}: {e}')
            print('-' * 60)
    
    print(f'‚úÖ Summary: {valid_files}/{len(csv_files)} valid files, {total_rows:,} total rows')
    
    if total_rows == 0:
        print('‚ùå No data collected!')
        return False
        
    if valid_files == 0:
        print('‚ùå No valid files!')
        return False
    
    print('‚úÖ Data validation passed')
    return True

if __name__ == "__main__":
    success = validate_data()
    sys.exit(0 if success else 1)
